diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..8bcbbbe 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            incr(void *);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -170,6 +171,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             is_cow_fault(pagetable_t ,uint64);
+int             cow_alloc(pagetable_t,uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..a8db087 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -21,15 +21,68 @@ struct run {
 struct {
   struct spinlock lock;
   struct run *freelist;
+  char *ref_page;  //its refer page
+  int page_cnt;  //the number of physicall page
+  char *end_;  //the end of mem
 } kmem;
 
+int page_cnt;
+int
+pagecnt(void *pa_start,void *pa_end)  //to get the number of page from the start to the end
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint64)pa_start);
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+    page_cnt++;
+  return page_cnt;
+}
+
+int arr[32697];
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
-  freerange(end, (void*)PHYSTOP);
+  kmem.page_cnt=pagecnt(end,(void*)PHYSTOP);
+  printf("page_cnt:%d\n",page_cnt);
+ 
+  kmem.ref_page=end;
+  for(int i=0;i<kmem.page_cnt;i++){
+    kmem.ref_page[i]=0;
+  }
+  kmem.end_=kmem.ref_page+kmem.page_cnt;
+  //end+=kmem.page_cnt;
+  
+  freerange(kmem.end_, (void*)PHYSTOP);
 }
 
+int 
+page_index(uint64 pa)
+{
+  pa=PGROUNDDOWN(pa);
+  int res=(pa-(uint64)kmem.end_)/PGSIZE;  //get the index of address pa
+  if(res<0||res>=kmem.page_cnt)
+    panic("page_index illegal");
+  return res;
+}
+
+void
+incr(void *pa)
+{
+  int index=page_index((uint64)pa);
+  acquire(&kmem.lock);
+  kmem.ref_page[index]++;  //add the index count of its physical address
+  release(&kmem.lock);
+}
+
+void
+desc(void *pa)
+{
+  int index=page_index((uint64)pa);
+  acquire(&kmem.lock);
+  kmem.ref_page[index]--;
+  release(&kmem.lock);
+}
 void
 freerange(void *pa_start, void *pa_end)
 {
@@ -46,6 +99,13 @@ freerange(void *pa_start, void *pa_end)
 void
 kfree(void *pa)
 {
+  int index=page_index((uint64)pa);
+  if(kmem.ref_page[index]>1)
+  {
+    desc(pa);
+    return;
+  }
+  if(kmem.ref_page[index]==1)desc(pa);
   struct run *r;
 
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
@@ -77,6 +137,9 @@ kalloc(void)
   release(&kmem.lock);
 
   if(r)
+  {
     memset((char*)r, 5, PGSIZE); // fill with junk
+    incr(r);
+  }
   return (void*)r;
 }
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..159393b 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_COW (1L << 8)  //for copy-on-write tag
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..8ab0bad 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -67,7 +67,26 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  } 
+  else if(r_scause()==15||r_scause()==13)  //page lost or visit wrong
+  {
+    uint64 va=r_stval();  //get the virtual address
+    if(is_cow_fault(p->pagetable,va))  //is a cow fault
+    {
+      if(cow_alloc(p->pagetable,va)<0)  //allocate the page for child proc
+      {
+        printf("usertrap():cow_alloc failed!");
+        p->killed=1;  //kill the proc
+      }
+    }
+    else
+    {
+      printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+    p->killed = 1;
+    }
+  }
+  else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     p->killed = 1;
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..1df679d 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -151,6 +151,9 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
     if(*pte & PTE_V)
       panic("mappages: remap");
     *pte = PA2PTE(pa) | perm | PTE_V;
+    
+    //incr((void*)pa);
+    
     if(a == last)
       break;
     a += PGSIZE;
@@ -290,7 +293,43 @@ uvmfree(pagetable_t pagetable, uint64 sz)
     uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
   freewalk(pagetable);
 }
-
+int 
+is_cow_fault(pagetable_t pagetable,uint64 va)
+{
+  if(va>=MAXVA)return 0;  //get the virtual page address
+  va=PGROUNDDOWN(va);
+  pte_t *pte=walk(pagetable,va,0);  //the the page table entry
+  if(pte == 0)
+    return 0;
+  if((*pte & PTE_V) == 0)
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  if(*pte&PTE_COW)return 1;  //is tagged as cow
+  return 0;
+}
+int             
+cow_alloc(pagetable_t pagetable,uint64 va)
+{
+  va=PGROUNDDOWN(va);
+  pte_t *pte=walk(pagetable,va,0);  //get the PTE
+  uint64 pa=PTE2PA(*pte);  //get the parent page's address
+  int flag=PTE_FLAGS(*pte);  //get the pte flag
+  char *mem=kalloc();  //alloc a new page
+  if(mem==0)return -1;
+  memmove(mem,(char*)pa,PGSIZE);  //copy from pa to new mem
+  uvmunmap(pagetable,va,1,1);  //delete the pre cow page
+  
+  
+  flag&=~(PTE_COW);  //clear the COW
+  flag|=PTE_W;  //the page can be written
+  if(mappages(pagetable,va,PGSIZE,(uint64)mem,flag)<0) // map the newly allocated page (mem) to the original virtual address (va)
+  {
+    kfree(mem);
+    return -1;
+  }
+  return 0;
+}
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -303,22 +342,24 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  //char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
-    pa = PTE2PA(*pte);
+    pa = PTE2PA(*pte);  //get the parent page
+    *pte=*pte&~(PTE_W);  //clear the PTE_W for write page
+    *pte=*pte|PTE_COW;  //signal as cow(copy_on_write)
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+    /*if((mem = kalloc()) == 0)
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    memmove(mem, (char*)pa, PGSIZE);*/
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){  //copy parent's page to new page
       goto err;
     }
+    incr((void*)pa);  //add ref_page
   }
   return 0;
 
@@ -350,6 +391,14 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if(is_cow_fault(pagetable,va0))
+    {
+      if(cow_alloc(pagetable,va0)<0)
+      {
+        printf("copyout:cowalloc fail!\n");
+        return -1;
+      }
+    }
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
