diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index 12793e8..c6328d5 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -30,7 +30,17 @@ barrier()
   // Block until all threads have called barrier() and
   // then increment bstate.round.
   //
-  
+  pthread_mutex_lock(&bstate.barrier_mutex);  //lock the mutex
+  bstate.nthread++;  //add the number of thread that reached barrier
+  if(bstate.nthread!=nthread)  //not all the threads reached
+    pthread_cond_wait(&bstate.barrier_cond,&bstate.barrier_mutex);  //wait
+  else
+  {
+    bstate.nthread=0;  //for the next round
+    ++bstate.round;
+    pthread_cond_broadcast(&bstate.barrier_cond);  //awake the threads
+  }
+  pthread_mutex_unlock(&bstate.barrier_mutex);  //release the mutex
 }
 
 static void *
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 82afe76..395da34 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -5,7 +5,7 @@
 #include <pthread.h>
 #include <sys/time.h>
 
-#define NBUCKET 5
+#define NBUCKET 7  //add NBUCKET to 7
 #define NKEYS 100000
 
 struct entry {
@@ -17,6 +17,7 @@ struct entry *table[NBUCKET];
 int keys[NKEYS];
 int nthread = 1;
 
+pthread_mutex_t locks[NBUCKET];  //define mutex
 
 double
 now()
@@ -52,7 +53,9 @@ void put(int key, int value)
     e->value = value;
   } else {
     // the new is new.
+    pthread_mutex_lock(&locks[i]);  //lock the mutex
     insert(key, value, &table[i], table[i]);
+    pthread_mutex_unlock(&locks[i]);  //unlock the mutex
   }
 
 }
@@ -117,7 +120,10 @@ main(int argc, char *argv[])
   for (int i = 0; i < NKEYS; i++) {
     keys[i] = random();
   }
-
+  
+  for(int i=0;i<NBUCKET;i++){  //init the mutex locks
+    pthread_mutex_init(&locks[i],NULL);
+  }
   //
   // first the puts
   //
diff --git a/user/uthread.c b/user/uthread.c
index 06349f5..d391ed5 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -10,10 +10,28 @@
 #define STACK_SIZE  8192
 #define MAX_THREAD  4
 
-
+struct context {  //copy from proc
+  uint64 ra;
+  uint64 sp;
+
+  // callee-saved
+  uint64 s0;
+  uint64 s1;
+  uint64 s2;
+  uint64 s3;
+  uint64 s4;
+  uint64 s5;
+  uint64 s6;
+  uint64 s7;
+  uint64 s8;
+  uint64 s9;
+  uint64 s10;
+  uint64 s11;
+};
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
+  struct context context;  /*from proc's struct context register*/
 };
 struct thread all_thread[MAX_THREAD];
 struct thread *current_thread;
@@ -62,6 +80,7 @@ thread_schedule(void)
      * Invoke thread_switch to switch from t to next_thread:
      * thread_switch(??, ??);
      */
+     thread_switch((uint64)&t->context,(uint64)&next_thread->context);
   } else
     next_thread = 0;
 }
@@ -76,6 +95,8 @@ thread_create(void (*func)())
   }
   t->state = RUNNABLE;
   // YOUR CODE HERE
+  t->context.ra=(uint64)func;
+  t->context.sp=(uint64)(t->stack)+STACK_SIZE-1;  //sp point to the bottom of stack
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 5defb12..403d616 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -8,4 +8,35 @@
 	.globl thread_switch
 thread_switch:
 	/* YOUR CODE HERE */
+	//the current thread
+	sd ra, 0(a0)
+        sd sp, 8(a0)
+        sd s0, 16(a0)
+        sd s1, 24(a0)
+        sd s2, 32(a0)
+        sd s3, 40(a0)
+        sd s4, 48(a0)
+        sd s5, 56(a0)
+        sd s6, 64(a0)
+        sd s7, 72(a0)
+        sd s8, 80(a0)
+        sd s9, 88(a0)
+        sd s10, 96(a0)
+        sd s11, 104(a0)
+        
+	//the target thread
+	ld ra, 0(a1)
+        ld sp, 8(a1)
+        ld s0, 16(a1)
+        ld s1, 24(a1)
+        ld s2, 32(a1)
+        ld s3, 40(a1)
+        ld s4, 48(a1)
+        ld s5, 56(a1)
+        ld s6, 64(a1)
+        ld s7, 72(a1)
+        ld s8, 80(a1)
+        ld s9, 88(a1)
+        ld s10, 96(a1)
+        ld s11, 104(a1)
 	ret    /* return to ra */
